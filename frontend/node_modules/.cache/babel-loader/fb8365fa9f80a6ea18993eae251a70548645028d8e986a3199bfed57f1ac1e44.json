{"ast":null,"code":"import axios from 'axios';\n\n// Configuração do cliente axios para comunicação com o backend\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Cliente axios configurado com URL base e headers padrão\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Funções para interagir com a API do backend\n\n/**\n * Faz upload de um arquivo CSV para o backend\n * @param {File} file - Arquivo CSV para upload\n * @returns {Promise} - Promise com a resposta do servidor\n */\nexport const uploadCSV = async file => {\n  const formData = new FormData();\n  formData.append('file', file);\n  return apiClient.post('/upload-csv/', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n};\n\n/**\n * Obtém informações básicas sobre os dados carregados\n * @returns {Promise} - Promise com a resposta do servidor\n */\nexport const getDataInfo = async () => {\n  return apiClient.get('/data-info/');\n};\n\n/**\n * Gera gráficos de análise exploratória de dados (EDA)\n * @returns {Promise} - Promise com a resposta do servidor contendo os gráficos em base64\n */\nexport const generateEDA = async () => {\n  return apiClient.get('/generate-eda/');\n};\n\n/**\n * Envia opções de pré-processamento para o backend\n * @param {Object} options - Opções de pré-processamento\n * @returns {Promise} - Promise com a resposta do servidor\n */\nexport const preprocessData = async options => {\n  return apiClient.post('/preprocess/', options);\n};\n\n/**\n * Treina um modelo de machine learning e faz previsões\n * @param {Object} modelOptions - Opções do modelo (tipo, coluna alvo, features)\n * @returns {Promise} - Promise com a resposta do servidor\n */\nexport const trainAndPredict = async modelOptions => {\n  return apiClient.post('/predict/', modelOptions);\n};\n\n/**\n * Obtém os resultados para download\n * @returns {Promise} - Promise com a resposta do servidor contendo o CSV\n */\nexport const downloadResults = async () => {\n  return apiClient.get('/download-results/');\n};\nexport default {\n  uploadCSV,\n  getDataInfo,\n  generateEDA,\n  preprocessData,\n  trainAndPredict,\n  downloadResults\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","uploadCSV","file","formData","FormData","append","post","getDataInfo","get","generateEDA","preprocessData","options","trainAndPredict","modelOptions","downloadResults"],"sources":["/app/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Configuração do cliente axios para comunicação com o backend\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Cliente axios configurado com URL base e headers padrão\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Funções para interagir com a API do backend\n\n/**\n * Faz upload de um arquivo CSV para o backend\n * @param {File} file - Arquivo CSV para upload\n * @returns {Promise} - Promise com a resposta do servidor\n */\nexport const uploadCSV = async (file) => {\n  const formData = new FormData();\n  formData.append('file', file);\n  \n  return apiClient.post('/upload-csv/', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n  });\n};\n\n/**\n * Obtém informações básicas sobre os dados carregados\n * @returns {Promise} - Promise com a resposta do servidor\n */\nexport const getDataInfo = async () => {\n  return apiClient.get('/data-info/');\n};\n\n/**\n * Gera gráficos de análise exploratória de dados (EDA)\n * @returns {Promise} - Promise com a resposta do servidor contendo os gráficos em base64\n */\nexport const generateEDA = async () => {\n  return apiClient.get('/generate-eda/');\n};\n\n/**\n * Envia opções de pré-processamento para o backend\n * @param {Object} options - Opções de pré-processamento\n * @returns {Promise} - Promise com a resposta do servidor\n */\nexport const preprocessData = async (options) => {\n  return apiClient.post('/preprocess/', options);\n};\n\n/**\n * Treina um modelo de machine learning e faz previsões\n * @param {Object} modelOptions - Opções do modelo (tipo, coluna alvo, features)\n * @returns {Promise} - Promise com a resposta do servidor\n */\nexport const trainAndPredict = async (modelOptions) => {\n  return apiClient.post('/predict/', modelOptions);\n};\n\n/**\n * Obtém os resultados para download\n * @returns {Promise} - Promise com a resposta do servidor contendo o CSV\n */\nexport const downloadResults = async () => {\n  return apiClient.get('/download-results/');\n};\n\nexport default {\n  uploadCSV,\n  getDataInfo,\n  generateEDA,\n  preprocessData,\n  trainAndPredict,\n  downloadResults,\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;;AAExE;AACA,MAAMC,SAAS,GAAGL,KAAK,CAACM,MAAM,CAAC;EAC7BC,OAAO,EAAEN,OAAO;EAChBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GAAG,MAAOC,IAAI,IAAK;EACvC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;EAE7B,OAAOL,SAAS,CAACS,IAAI,CAAC,cAAc,EAAEH,QAAQ,EAAE;IAC9CH,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMO,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,OAAOV,SAAS,CAACW,GAAG,CAAC,aAAa,CAAC;AACrC,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,OAAOZ,SAAS,CAACW,GAAG,CAAC,gBAAgB,CAAC;AACxC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,cAAc,GAAG,MAAOC,OAAO,IAAK;EAC/C,OAAOd,SAAS,CAACS,IAAI,CAAC,cAAc,EAAEK,OAAO,CAAC;AAChD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAG,MAAOC,YAAY,IAAK;EACrD,OAAOhB,SAAS,CAACS,IAAI,CAAC,WAAW,EAAEO,YAAY,CAAC;AAClD,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,OAAOjB,SAAS,CAACW,GAAG,CAAC,oBAAoB,CAAC;AAC5C,CAAC;AAED,eAAe;EACbP,SAAS;EACTM,WAAW;EACXE,WAAW;EACXC,cAAc;EACdE,eAAe;EACfE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}